// CheckBook.h ö a class template for a CheckBook, where the check is any data type// The constructor and the writeCheck function can throw exceptions if// out of heap memory.// to use a struct for the DataType, you must overload the following operators://	>	left operand:  struct object	right operand:  float//		used to compare the amount of the check in the struct object with the //		balance//	-=	left operand:  float		right operand:  struct object//		used to subtract the amount of the check in the struct object from the//		balance#include "Array.h"template <class DataType>class CheckBook{public:	CheckBook( float initBalance );	bool writeCheck( const DataType & amount );  // returns false if amount is greater  										 // than balance; otherwise returns true	void deposit( float amount );	float getBalance(  ) const;	Array<DataType> getChecks( );  		float getLastDeposit( ) const; private:	float balance;	int lastIndex;  // the index of the last check that was written	Array<DataType> checks;  	float lastDeposit;};template <class DataType>CheckBook<DataType>::CheckBook( float initBalance ): balance( initBalance ), lastIndex( - 1 ), checks( 2 ){}// returns false if amount is greater than balance; otherwise returns truetemplate <class DataType>bool CheckBook<DataType>::writeCheck( const DataType & amount ){	if ( amount > balance )		return false;	balance -= amount;	if ( lastIndex == checks.length() - 1 )		checks.changeSize( 2 * checks.length( ) );	lastIndex++;	checks[ lastIndex ] = amount;	return true;}template <class DataType>void CheckBook<DataType>::deposit( float amount ){	balance += amount;	lastDeposit = amount;}template <class DataType>float CheckBook<DataType>::getBalance( ) const{	return balance;}template <class DataType>Array<DataType> CheckBook<DataType>::getChecks(  ){	Array<DataType> info( lastIndex + 1 );	for ( int i = 0, j = lastIndex; j >= 0; i++, j-- )		info[ i ] = checks[ j ];	return info;}template <class DataType>float CheckBook<DataType>::getLastDeposit( ) const{	return lastDeposit;}