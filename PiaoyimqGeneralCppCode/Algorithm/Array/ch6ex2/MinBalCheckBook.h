// MinBalCheckBook.h ö a class template derived from the CheckBook class template// The constructor and the writeCheck function can throw exceptions if// out of heap memory.// to use a struct for the DataType, you must overload the following operators://	>	left operand:  struct object	right operand:  float//		used to compare the amount of the check in the struct object with the //		balance//	-=	left operand:  float		right operand:  struct object//		used to subtract the amount of the check in the struct object from the//		balance#include "CheckBook.h"template <class DataType>class MinBalCheckBook : public CheckBook<DataType>{public:	MinBalCheckBook( float initBalance, float minBalance, float sfee, float cfee );	bool writeCheck( const DataType & amount );  // returns false if amount is greater 		                                 // than balance; otherwise returns true	void deductServiceFee( );private:		float minBalance;	float serviceFee;	float checkFee;	float balance;//zhuweibo add};template <class DataType>MinBalCheckBook<DataType>::MinBalCheckBook( float initBalance, float minBal, float sFee, float cFee ): CheckBook<DataType>( initBalance ), minBalance( minBal ), serviceFee( sFee ), checkFee( cFee ){}// returns false if amount is greater than balance; otherwise returns truetemplate <class DataType>bool MinBalCheckBook<DataType>::writeCheck( const DataType & amount ){	bool success = CheckBook<DataType>::writeCheck( amount );	if ( success && balance < minBalance )		balance -= checkFee;	return success;}template <class DataType>void MinBalCheckBook<DataType>::deductServiceFee( ){	if ( balance < minBalance )		balance -= serviceFee;}