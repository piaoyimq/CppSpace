// stack.h - the array implementation of a stack// note:  the constructor, the (default) copy constructor, the (default) assignment operator,// and push function can cause an exception to be thrown if heap memory is exhausted#include "Array.h"template <class DataType>class Stack{public:	Stack( );	void push( DataType elementToPush );  	// removes an element from the top of the stack and returns it in poppedElement; 	// returns false if called on an empty stack; otherwise, returns true		bool pop( DataType & poppedElement );	// returns the element at the top of the stack in topElement without removing it	// returns false is called on an empty stack; otherwise, returns true	bool peek( DataType & topElement ); 	bool isEmpty( ) const;  // returns true if the stack is empty;				// otherwise, returns false	void makeEmpty( );private:	Array<DataType> elements;	int top;};template <class DataType>Stack<DataType>::Stack( )	: elements( 2 ), top( -1 ){}template <class DataType>void Stack<DataType>::push( DataType elementToPush ){	if ( ++top == elements.length( ) )		elements.changeSize( elements.length( ) << 1 );	elements[ top ] = elementToPush;}// removes an element from the top of the stack and returns it in poppedElement;// returns false if called on an empty stack; otherwise, returns truetemplate <class DataType>bool Stack<DataType>::pop( DataType & poppedElement ){	if ( top == -1  )		return false;	poppedElement = elements[ top ];	top--;	int trysize = elements.length( );	while ( ( top + 1 <= trysize >> 2 ) && trysize > 2 )		trysize >>= 1;	if ( trysize < elements.length( ) ) {		try {			elements.changeSize( trysize  );		}		catch( ... ) { }	}	return true;}// returns the element at the top of the stack in topElement without removing it// returns false if called on an empty stack; otherwise, returns truetemplate <class DataType>bool Stack<DataType>::peek( DataType & topElement ){	if ( top == -1  )		return false;	topElement = elements[ top ];	return true;}template <class DataType>bool Stack<DataType>::isEmpty( ) const{	return top == -1;}template <class DataType>void Stack<DataType>::makeEmpty( ){	top = -1;	try {		elements.changeSize( 2 );	}	catch( ... ) { }}